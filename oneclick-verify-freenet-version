#!/bin/sh

# (c) 2013 mempo.org - Released to public domain; Choose any: WTFPL licence; BSD licence;
# opensource@mempo.org - Seriously easy security for everyone :)
# See http://github.com/mempo/

# Goal: This script will download and verify a freenet version (compare the 
# build from downloaded sources with the resulting published binary)
# Purpose: Verifying freenet binary builds (.jar) against binary backdoor
# Method: Just wrap the verify-build with all needed setting up commands

#
# TODO - possible attacks
#
# Attack1) Hack one of the git sources that get executed e.g. the scripts.git,
# in a way that will take over verification environment.
#
# Fix: show/post checksums of downloaded git before proceeding so
# it can be proven retrospectivly there was a problem.
#
# Fix2: (better) provide expected checksums in some git and verify this
# before *executing* anything that was downloaded.

# --- config ----
config_version="$1"
config_basedir_top="$HOME/verify_freenet"

# --- functions ----

script_error() {
	echo "ERROR: There was a problem with this script, unable to do the verification." ; echo "" ; exit 1
}
verification_error() {
	echo "ERROR: There was a problem, possibly verification FAILED - ready the information above and please report it (after censoring the logs so they do not reveal who YOU are by IPs/times/download speeds/user names/dir names/etc)" ; echo "" ; exit 1
}

# --- start ----

if [ -z "$HOME" ] ; then echo "The user HOME is not defined, please define this variable in env."; script_error; fi

if [ -z "$config_version" ] ; then
	echo "Please declare the version to verify as argument to this script, e.g. 1453"	
	echo "Freenet version:"
	read config_version
fi

if [ -z "$config_version" ] ; then
	echo "No valid version given"
	script_error
fi

config_basedir="$config_basedir_top/$config_version"

echo ""
echo "---------------------------------"
echo "Will verify Freenet build version $config_version"
echo "Using directory $config_basedir [PRIVATE]" # private, it might be absolute e.g. with username
echo ""
echo "HINT: Usage in batch SCRIPT: this_script_name 1453 --no-confirmation-start --no-confirmation-DELETE"
echo ""
echo "We will use:"
echo "  * download over clear-internet (your IP is seen by ISP and everyone around) !!!"
echo "  * also download from Freenet (need to have Freenet running)"
echo "it will be visible to others that you (IP) are verifing freenet (unless e.g. VM on TOR) "

if [ "$2" != "--no-confirmation-start" ] 
then
	echo "HINT for SCRIPT: use argument --no-confirmation-start on position 2 to skip this question."
	echo "Is that ok? to skip this question) Continue? (y/n)"
	read reply
	if [ "$reply" != "y" ]
	then
		echo "You said to NOT continue - ok aborting"
		script_error
	fi
fi
echo "---------------------------------"


# --- cleanup ----

if [ -d "$config_basedir" ] ; then
	echo "The directory $config_basedir exists, probably from previous verification."
	echo "DELETE THIS DIRECTORY? Write word 'del' if you agree or else to cancel." 

	if [ "$3" != "--no-confirmation-DELETE" ] ; then
		echo "HINT for SCRIPT: use argument --no-confirmation-DELETE on position 3 to skip this question."
		echo "Delete? (del/n)"
		read reply
		if [ "$reply" != "del" ]
		then
			echo "You said to NOT continue (not deleting this directory) - ok aborting (you can delete it manually and restart)"
			script_error
		fi
	fi
	echo "Ok, DELETING this directory"
	rm -rf "$config_basedir" || { echo "Can not delete old dir"; script_error; }
	echo "Deleted."
fi

# --- preparation to verify ----

set -x

mkdir -p "$config_basedir" || { echo "Can not create dir"; script_error; }
cd "$config_basedir" || { echo "Can not enter dir"; script_error; }

echo "Using following downloaded files:" > "$config_basedir/build-dependencies.log"

echo "" ; echo "Downloading from git."
git clone git://github.com/freenet/scripts.git || { echo "Can not download from git."; script_error; }
	dir="scripts/" ; echo "Checksum (sha512 of sorted sha256deep) of dir $dir is:" | tee -a "$config_basedir/build-dependencies.log"
	sha256deep -r "$dir" | sort | sha512sum | tee -a "$config_basedir/build-dependencies.log"
	echo "" | tee -a "$config_basedir/build-dependencies.log"

echo "" ; echo "Downloading from git."
git clone git://github.com/freenet/fred-official.git || { echo "Can not download from git."; script_error; }
	dir="fred-official/" ; echo "Checksum (sha512 of sorted sha256deep) of dir $dir is:" | tee -a "$config_basedir/build-dependencies.log"
	sha256deep -r "$dir" | sort | sha512sum | tee -a "$config_basedir/build-dependencies.log"
	echo "" | tee -a "$config_basedir/build-dependencies.log"

echo "" ; echo "Downloading from git."
git clone git://github.com/freenet/lib-pyFreenet-staging.git || { echo "Can not download from git."; script_error; }
	dir="lib-pyFreenet-staging" ; echo "Checksum (sha512 of sorted sha256deep) of dir $dir is:" | tee -a "$config_basedir/build-dependencies.log"
	sha256deep -r "$dir" | sort | sha512sum | tee -a "$config_basedir/build-dependencies.log"
	echo "" | tee -a "$config_basedir/build-dependencies.log"


# --- prepare freenetrc ----
cp scripts/freenetrc-sample ~/.freenetrc || { echo "Can not copy RC"; script_error; }

# get script to make patches in .freenetrc absolute
script="verify-config-path-absolute" ; 
script_local="$HOME/freenet-PATCH/$script" ; # local copy for when it isn't released or verifying version <=1453
if [ -r "$script_local" ] ; then 
	echo "Found local script $script_local [PRIVATE] ***"
	if [ ! -r "scripts/$script" ] ; then # ok, we have a local script and there isn't one from bit so let's use that
	cp "$script_local" "scripts/" || { echo "Can not copy the local script $script_local" ; script_error; }  # copy your local script
	fi
fi

# use the script:
config_script="./scripts/$script"
if [ -x "$config_script" ] ; then
	$config_script || { echo "Can not configure the .freenetrc with script $config_script"; script_error; } # execute it
else
	set +x
	echo ""
	echo "The configuration script $script is not available as executable here (from git) "
	echo "...nor in $script_local"
	echo "Therefore you need to yourself edit NOW the file ~/.freenetrc in following way:"
	echo "...search for variables (freenetRoot) or (releaseDir and fredDir) depending on version" 
	echo "...and in each replace the ../ or the /home/freenet/ with absolute path of"
	echo "...the directory where we build freenet: $config_basedir/ "
	echo "This is very easy, or ask us for support if any questions"
	echo "Enter y when the file was edited by you or n to cancel."
	echo "Are you NOW done with editing this file? (y/n) (n will cancel)"
	read reply
	if [ "$reply" != "y" ]
	then
		echo "You said to NOT continue - ok, aborting."
		script_error
	fi
	set -x
fi

set -x

mkdir FreenetReleased || { echo "Can not make dir for release "; script_error; }
wget https://downloads.freenetproject.org/alpha/freenet-ext.jar -O FreenetReleased/freenet-ext.jar || { echo "Can not download freenet-ext"; script_error; }
wget http://www.bouncycastle.org/download/bcprov-jdk15on-149.jar -O FreenetReleased/bcprov.jar || { echo "Can not download bcprov "; script_error; }
wget http://amphibian.dyndns.org/flogmirror/mykey.gpg -O toad.gpg || { echo "Can not download GPG key "; script_error; }

sha512sum FreenetReleased/freenet-ext.jar | tee -a "$config_basedir/build-dependencies.log"
sha512sum FreenetReleased/bcprov.jar | tee -a "$config_basedir/build-dependencies.log"
sha512sum *.gpg | tee -a "$config_basedir/build-dependencies.log"

gpg --import toad.gpg || { echo "Can not import GPG key"; script_error; }

cd lib-pyFreenet-staging  || { echo "Can not enter pyFreenet dir "; script_error; }
python setup.py install --user || { echo "Can not setup pyFreenet"; script_error; }

export PATH=$PATH:"$HOME/.local/bin"

cd ../
cd scripts/

echo ""
echo "--- Doing the MAIN VERIFICATION ---"

./verify-build || { echo "Error in verification?"; echo "-----" ; 
	echo "*** IF the verification shows the files are DIFFERENT then please warn other users." ; 
	echo " -----"; verification_error; 
}

set +x

echo "--- DEPENDENCIES ---"
cat "$config_basedir/build-dependencies.log"
echo "--------------------"

echo ""
echo "You should paste results of the verification to other users"
echo "In Freenet: on FMS, Sone, Frost if you can"
echo "  1) Post the > < + - differences lines if any above"
echo "  2) Post the DEPENDENCIES summary above with checksums and the checksum of your .jar"
echo "  3) Post the information was the verification successfull or not, by quoting entire line"
echo ""
echo "You could also copy/paste entire text above, but best from VM on TOR,"
echo "please REMEMBER, posting *full* above LOG *will* de-anonymize you "
echo "(by times/speeds of downloads, also username etc)"
echo "so you might want to only post the part 1) 2) 3)."

